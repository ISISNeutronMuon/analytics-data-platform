x-lakekeeper-image: &lakekeeper-image ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:v0.8.4}

services:
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    volumes:
      - ./docker/keycloak/realm-iceberg.json:/opt/keycloak/data/import/realm.json
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/127.0.0.1/8080;echo -e "GET /realms/master/.well-known/openid-configuration HTTP/1.1\r\nhost: 127.0.0.1:8080\r\nConnection: close\r\n\r\n" >&3;grep "jwks_uri"  <&3',
        ]
      interval: 2s
      timeout: 80s
      retries: 10
      start_period: 60s
    ports:
      - "8080:8080"
    command:
      [
        "start-dev",
        "--metrics-enabled=true",
        "--health-enabled=true",
        "--import-realm",
      ]
    networks:
      - lakehouse_net

  lakekeeper:
    image: *lakekeeper-image
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@lakekeeper-db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@lakekeeper-db:5432/postgres
      - LAKEKEEPER__OPENID_PROVIDER_URI=http://keycloak:8080/realms/iceberg/
      - LAKEKEEPER__OPENID_AUDIENCE=lakekeeper
      - RUST_LOG=warn,iceberg_catalog=trace,iceberg_catalog_bin=trace,iceberg_ext=trace
    command: ["serve"]
    healthcheck:
      test: ["CMD", "/home/nonroot/iceberg-catalog", "healthcheck"]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      keycloak:
        condition: service_healthy
      lakekeeper-migrate:
        condition: service_completed_successfully
      lakekeeper-db:
        condition: service_healthy
      minio_createbucket:
        condition: service_completed_successfully
    networks:
      - lakehouse_net
    ports:
      - "8181:8181"

  lakekeeper-migrate:
    image: *lakekeeper-image
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@lakekeeper-db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@lakekeeper-db:5432/postgres
      - RUST_LOG=info
    restart: "no"
    command: ["migrate"]
    depends_on:
      lakekeeper-db:
        condition: service_healthy
    networks:
      - lakehouse_net

  lakekeeper-db:
    image: bitnami/postgresql:16.3.0
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      - lakehouse_net

  minio:
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio-root-user
      MINIO_ROOT_PASSWORD: minio-root-password
      MINIO_API_PORT_NUMBER: 9000
      MINIO_CONSOLE_PORT_NUMBER: 9001
      MINIO_SCHEME: http
    ports:
      - 9001:9001
      - 9000:9000
    command: [ "server", "/data", "--console-address", ":9001" ]
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse_net

  minio_createbucket:
    depends_on:
      minio:
        condition: service_healthy
    image: quay.io/minio/mc:latest
    environment:
      MINIO_ROOT_USER: minio-root-user
      MINIO_ROOT_PASSWORD: minio-root-password
      MINIO_BUCKET_NAME: e2e-tests-warehouse
    entrypoint: |
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} \
      if ! /usr/bin/mc ls minio/$${MINIO_BUCKET_NAME}; then \
        echo \"Bucket '$${MINIO_BUCKET_NAME}' not found, creating...\" \
        /usr/bin/mc mb minio/$${MINIO_BUCKET_NAME}; \
        /usr/bin/mc anonymous set public minio/$${MINIO_BUCKET_NAME}; \
        echo \"Bucket '$${MINIO_BUCKET_NAME}' created with public access policy\" \
      else \
        echo \"Found bucket '$${MINIO_BUCKET_NAME}'\" \
      fi \
      "
    networks:
      - lakehouse_net

  python-uv:
    profiles:
      - tests
    image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    working_dir: /opt/app
    environment:
      - UV_LINK_MODE=copy
      - UV_CACHE_DIR=/opt/uv-cache
      - UV_PROJECT_ENVIRONMENT=/opt/uv-venv
    depends_on:
      lakekeeper:
        condition: service_healthy
    volumes:
      - uv_cache:/opt/uv-cache
      - ..:/opt/app
    networks:
      - lakehouse_net

networks:
  lakehouse_net:
volumes:
  uv_cache:
