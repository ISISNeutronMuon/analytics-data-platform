---
- name: "Verify required variables are defined"
  ansible.builtin.assert:
    that:
      - var_name is defined
      - var_name | length > 0
    fail_msg: "{{ var_name }} needs to be set for the role to work"
    success_msg: "Required variable {{ var_name }} is defined"
  loop_control:
    loop_var: var_name
  with_items:
    - superset_instance_name

- name: "Include instance-specific variables ({{ superset_instance_name }})"
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/{{ superset_instance_name }}.yml"

- name: Ensure working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ superset_work_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure configuration files are synchronized
  become: true
  ansible.posix.synchronize:
    use_ssh_args: true
    src: ./
    dest: "{{ superset_work_dir }}/"
    archive: false
    recursive: true
    delete: true

- name: Ensure templated configuration files are synchronized
  become: true
  ansible.builtin.template:
    src: "{{ superset_template.src }}"
    dest: "{{ superset_work_dir }}/{{ superset_template.dest }}"
    mode: "{{ superset_template.mode|default('u=rw,g=r,o=r') }}"
  loop:
    - { src: docker-compose.yml.j2, dest: docker-compose.yml }
    - { src: docker/dotenv.j2, dest: docker/.env }
    - {
        src: docker/docker-init.sh.j2,
        dest: docker/docker-init.sh,
        mode: "u=rwx,g=rx,o=r",
      }
  loop_control:
    loop_var: superset_template

- name: Ensure superset_config.yml exists
  become: true
  no_log: true
  ansible.builtin.copy:
    dest: "{{ superset_work_dir }}/docker/pythonpath/superset_config.yml"
    content: "{{ superset_config_yaml | to_nice_yaml }}"
    mode: "u=rw,g=r,o=r"

- name: Ensure certificates directory exists
  become: true
  ansible.builtin.file:
    path: "{{ superset_work_dir }}/certs"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure certificates are present
  become: true
  no_log: true
  ansible.builtin.copy:
    dest: "{{ superset_work_dir }}/certs/{{ certificate.filename }}"
    content: "{{ certificate.content }}"
    owner: root
    group: root
    mode: "u=r,o=,g="
  loop:
    - { filename: stfc-ca.pem, content: "{{ stfc_ca_cert }}" }
  loop_control:
    loop_var: certificate

- name: Run Superset services
  become: true
  community.docker.docker_compose_v2:
    project_src: "{{ superset_work_dir }}"
    pull: always
    recreate: always
    state: present
