---
- name: Ensure S3 buckets exist
  amazon.aws.s3_bucket:
    name: "{{ warehouse.value.storage.bucket_name }}"
    endpoint_url: "{{ s3_endpoint }}"
    access_key: "{{ s3_access_key_id }}"
    secret_key: "{{ s3_access_secret }}"
    ceph: true
  loop: "{{ lakekeeper_catalog.warehouses | dict2items }}"
  loop_control:
    loop_var: warehouse

- name: Get info on lakekeeper container
  community.docker.docker_container_info:
    name: "{{ lakekeeper_container_name }}"
  register: result

- name: Stop Lakekeeper instance
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}"
    state: absent

- name: Run Lakekeeper migrations
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}_migrate"
    image: "{{ lakekeeper_image }}"
    command: migrate
    state: started
    cleanup: true
    detach: false
    restart_policy: no
    recreate: true
    env:
      #
      LAKEKEEPER__PG_ENCRYPTION_KEY="{{ lakekeeper_metadb_encryption_key }}"
      LAKEKEEPER__PG_DATABASE_URL_READ="postgresql://{{ lakekeeper_metadb_user }}:{{ lakekeeper_metadb_passwd }}@{{ lakekeeper_metadb_host }}:5432/{{ lakekeeper_metadb_name }}"
      LAKEKEEPER__PG_DATABASE_URL_WRITE="postgresql://{{ lakekeeper_metadb_user }}:{{ lakekeeper_metadb_passwd }}@{{ lakekeeper_metadb_host }}:5432/{{ lakekeeper_metadb_name }}"
      LAKEKEEPER__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      LAKEKEEPER__OPENID_AUDIENCE="lakekeeper"
      LAKEKEEPER__UI__OPENID_CLIENT_ID="lakekeeper"
      RUST_LOG="error"
    networks:
      - name: "{{ lakekeeper_container_network }}"
    comparisons:
      networks: strict
      env: strict

- name: Start Lakekeeper container
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}"
    image: "{{ lakekeeper_image }}"
    command: serve
    state: started
    cleanup: true
    detach: true
    restart_policy: unless-stopped
    recreate: true
    published_ports:
      - "{{ lakekeeper_http_port }}:8181"
    env:
      #
      LAKEKEEPER__PG_ENCRYPTION_KEY="{{ lakekeeper_metadb_encryption_key }}"
      LAKEKEEPER__PG_DATABASE_URL_READ="postgresql://{{ lakekeeper_metadb_user }}:{{ lakekeeper_metadb_passwd }}@{{ lakekeeper_metadb_host }}:5432/{{ lakekeeper_metadb_name }}"
      LAKEKEEPER__PG_DATABASE_URL_WRITE="postgresql://{{ lakekeeper_metadb_user }}:{{ lakekeeper_metadb_passwd }}@{{ lakekeeper_metadb_host }}:5432/{{ lakekeeper_metadb_name }}"
      LAKEKEEPER__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      LAKEKEEPER__OPENID_AUDIENCE="lakekeeper"
      LAKEKEEPER__UI__OPENID_CLIENT_ID="lakekeeper"
      LAKEKEEPER__UI__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      RUST_LOG="error"
    networks:
      - name: "{{ lakekeeper_container_network }}"
    comparisons:
      networks: strict
      env: strict

- name: Ensure Lakekeeper working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ lakekeeper_working_dir }}"
    state: directory
    mode: "0755"

- name: Copy bootstrap script
  become: true
  ansible.builtin.copy:
    src: bootstrap-warehouse.py
    dest: "{{ lakekeeper_working_dir }}/bootstrap-warehouse.py"
    mode: "0755"

- name: Generate warehouse template(s)
  become: true
  ansible.builtin.template:
    src: bootstrap-warehouse.json.j2
    dest: "{{ lakekeeper_working_dir }}/bootstrap-warehouse-{{ warehouse.name }}.json"
    mode: "0644"
  loop: "{{ lakekeeper_catalog.warehouses | dict2items(key_name='name') }}"
  loop_control:
    loop_var: warehouse
  register: warehouse_json_files

- name: Ensure Lakekeeper is bootstrapped
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}_bootstrap"
    image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    command:
      [
        "uv",
        "run",
        "/opt/work/bootstrap-warehouse.py",
        "--token-url",
        "{{ keycloak_token_endpoint_url_isis }}/protocol/openid-connect/token",
        "--client-id ansible --client-secret {{ vault_keycloak_client_secret_ansible }}",
        "--token-scope",
        "lakekeeper",
        "--log-level",
        "{{ lakekeeper_bootstrap_log_level }}",
        "--warehouse-json",
        "{{ warehouse_json_file | replace(lakekeeper_working_dir, '/opt/work') }}",
      ]
    state: started
    cleanup: true
    detach: false
    restart_policy: no
    recreate: true
    env:
      #
      UV_LINK_MODE=copy
      UV_PROJECT_ENVIRONMENT=/opt/uv-venv
    networks:
      - name: "{{ lakekeeper_container_network }}"
    volumes:
      - "{{ lakekeeper_working_dir }}:/opt/work"
  loop: "{{ warehouse_json_files.results | map(attribute='dest') | list }}"
  loop_control:
    loop_var: warehouse_json_file
