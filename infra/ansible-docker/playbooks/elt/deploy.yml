---
- name: Create logrotate_entries variable
  hosts: elt
  tasks:
    - set_fact:
        elt_cron_log_dirs: >
          {{ lakekeeper_catalog.warehouses.keys() |
             map('regex_replace', '^(.*)$', elt_cron_logs_root_dir + '/\1') |
             list
          }}
      loop: "{{ lakekeeper_catalog.warehouses.keys() }}"
    - set_fact:
        logrotate_entries: >
          {{ logrotate_entries | default([]) + [{'name': item.0, 'path': elt_cron_logs_root_dir ~ item.1}] }}
      loop: "{{ lakekeeper_catalog.warehouses.keys() | zip(elt_cron_log_dirs) | list }}"

- name: Configure ELT instance
  hosts: elt
  roles:
    - role: robertdebock.logrotate
      become: true
  tasks:
    # ---------- UV & Python ----------
    - name: Check if uv exists
      stat:
        path: /usr/local/bin/uv
      register: stat_uv

    - name: Fetch uv installer
      ansible.builtin.get_url:
        url: https://astral.sh/uv/0.6.6/install.sh
        dest: /tmp/uv-install.sh
      when: not stat_uv.stat.exists

    - name: Execute uv installer
      become: true
      shell: env UV_UNMANAGED_INSTALL=/usr/local/bin sh /tmp/uv-install.sh
      when: not stat_uv.stat.exists

    - name: Remove uv installer script
      file:
        path: /tmp/uv-install.sh
        state: absent
      when: not stat_uv.stat.exists

    - name: Find compatible Python version
      ansible.builtin.command: uv python find --quiet "{{ elt_uv_python_version }}"
      ignore_errors: true
      register: uv_python_find

    - name: Ensure Python is installed
      ansible.builtin.command: uv python install "{{ elt_uv_python_version }}"
      when: uv_python_find.rc != 0

    # ---------- AWS S3 ----------
    - name: Ensure S3 configuration directory exists
      ansible.builtin.file:
        path: "{{ ansible_env['HOME'] }}/.aws"
        state: directory
        mode: "u=rwx,g=rx,o=rx"

    - name: Ensure S3 config file is absent
      ansible.builtin.file:
        path: "{{ ansible_env['HOME'] }}/.aws/config"
        state: absent

    - name: Ensure AWS configuration is present
      ansible.builtin.copy:
        dest: "{{ ansible_env['HOME'] }}/.aws/credentials"
        content: |+
          [default]
          endpoint = {{ s3_endpoint }}
          request_checksum_calculation = when_required
          region = local-01
          aws_access_key_id = {{ s3_access_key_id }}
          aws_secret_access_key = {{ s3_access_secret }}
        mode: "u=rw,o=r,g=r"

    # ---------- secrets ----------
    - name: Ensure secrets directories exist
      become: true
      ansible.builtin.file:
        path: "{{ elt_secrets_root_dir }}/{{ warehouse.name }}"
        state: directory
        mode: "u=rwx,g=rx,o=rx"
      loop: "{{ elt_warehouses }}"
      loop_control:
        loop_var: warehouse

    - name: Generate secrets
      become: true
      no_log: true
      ansible.builtin.template:
        src: ./secrets/envvars.j2
        dest: "{{ elt_secrets_root_dir }}/{{ warehouse.name }}/envvars"
        mode: "u=rwx,g=r,o=r"
      loop: "{{ elt_warehouses }}"
      loop_control:
        loop_var: warehouse

    # ---------- Cron tasks ----------
    - name: Ensure cron scripts directory exists
      ansible.builtin.file:
        path: "{{ elt_cron_root_dir }}"
        state: directory
        mode: "u=rwx,g=rx,o=rx"

    - name: Create/update ELT cron script template
      ansible.builtin.template:
        src: ./cron/elt_task.sh.j2
        dest: "{{ elt_cron_root_dir }}/elt_task.sh"
        mode: "u=rwx,g=rx,o=rx"

    - name: Ensure cron logs directory exists
      ansible.builtin.file:
        path: "{{ elt_cron_logs_root_dir }}/{{ warehouse.name }}"
        state: directory
        mode: "u=rwx,g=rx,o=rx"
      loop: "{{ elt_warehouses }}"
      loop_control:
        loop_var: warehouse

    - name: Ensure cron jobs exist
      ansible.builtin.cron:
        name: "{{ warehouse.sources[0].name }}"
        state: "{{ warehouse.sources[0].state | default('present') }}"
        hour: "{{ warehouse.sources[0].hour }}"
        minute: "{{ warehouse.sources[0].minute }}"
        job: >
          ELT_GIT_REF=multiple-warehouses ELT_SECRETS={{ elt_secrets_root_dir }}/{{ warehouse.name }}/envvars
          {{ elt_cron_root_dir }}/elt_task.sh
          https://github.com/{{ warehouse.github_org }}/{{ warehouse.github_repo }}.git
          {{ elt_git_clone_dir }}/{{ warehouse.github_org }}/{{ warehouse.github_repo }}
          {{ warehouse.sub_dir }}/extract_load/{{ warehouse.sources[0].name }}
          {{ warehouse.sub_dir }}/transform/{{ warehouse.name }}
          {{ warehouse.sources[0].dbt_args }}
          > {{ elt_cron_logs_root_dir }}/{{ warehouse.name }}/{{ warehouse.sources[0].name }}-$(date +\%Y\%m\%d_\%H\%M\%S).log 2>&1
      loop: "{{ elt_warehouses }}"
      loop_control:
        loop_var: warehouse
