#!/usr/bin/env bash
set -euo pipefail

# Constants
ELT_GIT_REF=${ELT_GIT_REF:-main}
EXTRACT_AND_LOAD_SCRIPT=extract_and_load.py
LOG_LEVEL=DEBUG
ON_PIPELINE_FAILURE=log_and_continue
DBT_REQUIREMENTS_TXT=requirements.txt

function ensure_elt_sources_exist() {
  export GIT_TERMINAL_PROMPT=0
  local git_url=$1
  local git_clone_dir=$2
  if [ -d "$git_clone_dir" ]; then
    pushd $git_clone_dir
    git clean -d -x --force
    git reset --hard
    git checkout "$ELT_GIT_REF"
    git pull
    popd
  else
    git clone $git_url $git_clone_dir
    git checkout "$git_url"
  fi
}

# Script arguments - directories are relative to ELT_GIT_DEST
# As many dbt project directories can be passed as required
if [ $# -eq 0  ]; then
  echo "Usage $0 <git_url> <git_clone_dir> <extract_and_load_dir> [dbt_project_dir] [dbt_run_args...]"
  exit 1
fi
git_url=$1
git_clone_dir=$2
extract_and_load_dir=$3
dbt_project_dir=${4:-}
if [ -n "$dbt_project_dir" ]; then
  shift 4
else
  shift 3
fi

# Extraction
ensure_elt_sources_exist $git_url $git_clone_dir
cd $git_clone_dir/$extract_and_load_dir
echo uv run \
  --reinstall \
  --script $EXTRACT_AND_LOAD_SCRIPT \
  --log-level $LOG_LEVEL \
  --on-pipeline-step-failure $ON_PIPELINE_FAILURE

# Transform
if [ -n "$dbt_project_dir" ]; then
  echo cd $git_clone_dir/$dbt_project_dir
  echo uv venv
  echo uv pip install -r requirements/$DBT_REQUIREMENTS_TXT
  echo uv run dbt deps
  echo uv run dbt run $*
fi
