---
- name: Get info on lakekeeper container
  community.docker.docker_container_info:
    name: "{{ lakekeeper_container_name }}"
  register: result

- name: Stop Lakekeeper instance
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}"
    state: absent

- name: Run Lakekeeper migrations
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}_migrate"
    image: "{{ lakekeeper_image }}"
    command: migrate
    state: started
    cleanup: true
    detach: false
    restart_policy: no
    recreate: true
    env:
      #
      LAKEKEEPER__PG_ENCRYPTION_KEY="{{ lakekeeper_store_encryption_key }}"
      LAKEKEEPER__PG_DATABASE_URL_READ="postgresql://{{ lakekeeper_store_user }}:{{ lakekeeper_store_passwd }}@postgres:5432/{{ lakekeeper_store_dbname }}"
      LAKEKEEPER__PG_DATABASE_URL_WRITE="postgresql://{{ lakekeeper_store_user }}:{{ lakekeeper_store_passwd }}@postgres:5432/{{ lakekeeper_store_dbname }}"
      LAKEKEEPER__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      LAKEKEEPER__OPENID_AUDIENCE="lakekeeper"
      LAKEKEEPER__UI__OPENID_CLIENT_ID="lakekeeper"
      RUST_LOG="error"
    networks:
      - name: "{{ lakekeeper_container_network }}"
    comparisons:
      networks: strict
      env: strict

- name: Start Lakekeeper container
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}"
    image: "{{ lakekeeper_image }}"
    command: serve
    state: started
    cleanup: true
    detach: true
    restart_policy: unless-stopped
    recreate: true
    published_ports:
      - "{{ lakekeeper_http_port }}:8181"
    env:
      #
      LAKEKEEPER__PG_ENCRYPTION_KEY="{{ lakekeeper_store_encryption_key }}"
      LAKEKEEPER__PG_DATABASE_URL_READ="postgresql://{{ lakekeeper_store_user }}:{{ lakekeeper_store_passwd }}@postgres:5432/{{ lakekeeper_store_dbname }}"
      LAKEKEEPER__PG_DATABASE_URL_WRITE="postgresql://{{ lakekeeper_store_user }}:{{ lakekeeper_store_passwd }}@postgres:5432/{{ lakekeeper_store_dbname }}"
      LAKEKEEPER__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      LAKEKEEPER__OPENID_AUDIENCE="lakekeeper"
      LAKEKEEPER__UI__OPENID_CLIENT_ID="lakekeeper"
      LAKEKEEPER__UI__OPENID_PROVIDER_URI="http://{{ top_level_domain }}/auth/realms/isis"
      RUST_LOG="error"
    networks:
      - name: "{{ lakekeeper_container_network }}"
    comparisons:
      networks: strict
      env: strict

- name: Ensure Lakekeeper working directory exists
  become: true
  ansible.builtin.file:
    path: "{{ lakekeeper_working_dir }}"
    state: directory
    mode: "0755"

- name: Copy bootstrap script
  become: true
  ansible.builtin.copy:
    src: bootstrap-warehouse.py
    dest: "{{ lakekeeper_working_dir }}/bootstrap-warehouse.py"
    mode: "0755"

- name: Generate create warehouse template
  become: true
  ansible.builtin.template:
    src: bootstrap-warehouse.json.j2
    dest: "{{ lakekeeper_working_dir }}/bootstrap-warehouse.json"
    mode: "0644"

- name: Ensure Lakekeeper is bootstrapped
  community.docker.docker_container:
    name: "{{ lakekeeper_container_name }}_bootstrap"
    image: ghcr.io/astral-sh/uv:python3.12-bookworm-slim
    command: ["uv", "run", "/opt/work/bootstrap-warehouse.py"]
    state: started
    cleanup: true
    detach: false
    restart_policy: no
    recreate: true
    env:
      #
      UV_LINK_MODE=copy
      UV_PROJECT_ENVIRONMENT=/opt/uv-venv
      LAKEKEEPER_BOOTSTRAP__TOKEN_ENDPOINT_URL="{{ keycloak_token_endpoint_url_isis }}"
      LAKEKEEPER_BOOTSTRAP__CLIENT_ID=ansible
      LAKEKEEPER_BOOTSTRAP__CLIENT_SECRET="{{ vault_keycloak_client_secret_ansible }}"
      LAKEKEEPER_BOOTSTRAP__SCOPE=lakekeeper
      LAKEKEEPER_BOOTSTRAP__LAKEKEEPER_URL="{{ lakekeeper_url }}"
      LAKEKEEPER_BOOTSTRAP__WAREHOUSE_JSON_FILE=/opt/work/bootstrap-warehouse.json
    networks:
      - name: "{{ lakekeeper_container_network }}"
    volumes:
      - "{{ lakekeeper_working_dir }}:/opt/work"
