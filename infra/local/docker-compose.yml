# A development stack to emulate the Lakehouse. This is intended for local development.
#
# See README.md for configuration required before running "compose up".
#
# The base address of all services is "http://analytics.localhost:58080"

# image versions
x-lakekeeper-image: &lakekeeper-image quay.io/lakekeeper/catalog:v0.9.3
x-minio-image: &minio-image quay.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
x-postgres-image: &postgres-image postgres:16.9-bookworm
x-traefik-image: &traefik-image traefik:v3.4.4
x-trino-image: &trino-image trinodb/trino:475

# networks
x-lakehouse-networks: &lakehouse-networks
  - local-lakehouse-net

# superset options
x-superset-build: &superset-build ./superset
x-superset-user: &superset-user root
x-superset-depends-on: &superset-depends-on
  superset-redis:
    condition: service_started
x-superset-env: &superset-env
  - path: superset/docker/env-for-testing
    required: true
x-superset-volumes: &superset-volumes
  - ./superset/docker/docker-init.sh:/app/docker/docker-init.sh:ro
  - ./superset/docker/pythonpath:/app/docker/pythonpath:ro

services:
  #########################################################
  # Ingress
  #########################################################
  traefik:
    container_name: local-lakehouse-traefik
    image: *traefik-image
    ports:
      - "58080:80"
      - "58088:8088" # Trino won't allow itself to be deployed on a prefix path
      - "59000:9000" # MinIO. Lakekeeper won't allow a path on the storage/endpoint value
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/traefik-dynamic.yml:/etc/traefik/traefik-dynamic.yml"
      - "./certs:/certs"
    networks: *lakehouse-networks

  #########################################################
  # Database shared by all services
  #########################################################
  shared-database:
    container_name: local-lakehouse-shared-database
    image: *postgres-image
    environment:
      POSTGRES_USER: adpuser
      POSTGRES_PASSWORD: adppassword
      POSTGRES_DATABASE: unused
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -p 5432"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks: *lakehouse-networks
    volumes:
      - "shared_database_data:/var/lib/postgresql/data"

  shared-database-createdatabases:
    container_name: local-lakehouse-shared-database-createdatabases
    image: *postgres-image
    restart: "no"
    environment:
      PGPASSWORD: adppassword
    depends_on:
      shared-database:
        condition: service_healthy
    entrypoint: |
      /bin/bash -c "
      create_db_if_not_exists() {
        psql -v ON_ERROR_STOP=1 --host shared-database --username adpuser <<-EOSQL
          SELECT 'CREATE DATABASE $1' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$1')\\gexec
      EOSQL
      }
      create_db_if_not_exists lakekeeper
      create_db_if_not_exists superset
      "
    networks: *lakehouse-networks

  #########################################################
  # MinIO - Object store emulating the Ceph object store
  # in SCD. This does not exist in production
  #########################################################
  minio:
    container_name: local-lakehouse-minio
    image: *minio-image
    environment:
      MINIO_ROOT_USER: adpuser
      MINIO_ROOT_PASSWORD: adppassword
      MINIO_API_PORT_NUMBER: 9000
      MINIO_CONSOLE_PORT_NUMBER: 9001
      MINIO_SCHEME: http
      # This needs to match the route in traefik/traefik-dynamic.yml
      MINIO_BROWSER_REDIRECT_URL: http://analytics.localhost:58080/internal/minio/console
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks: *lakehouse-networks
    volumes:
      - "minio_data:/data"

  minio-createbucket:
    container_name: local-lakehouse-minio-create-bucket
    depends_on:
      minio:
        condition: service_healthy
    image: quay.io/minio/mc:RELEASE.2025-05-21T01-59-54Z
    environment:
      MINIO_ROOT_USER: adpuser
      MINIO_ROOT_PASSWORD: adppassword
      MINIO_BUCKET_NAME: local-lakehouse
    entrypoint: |
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} \
      if ! /usr/bin/mc ls minio/$${MINIO_BUCKET_NAME}; then \
        echo \"Bucket '$${MINIO_BUCKET_NAME}' not found, creating...\" \
        /usr/bin/mc mb minio/$${MINIO_BUCKET_NAME}; \
        echo \"Bucket '$${MINIO_BUCKET_NAME}' created.\" \
      else \
        echo \"Found bucket '$${MINIO_BUCKET_NAME}'\" \
      fi \
      "
    networks: *lakehouse-networks

  #########################################################
  # Lakekeeper - Iceberg REST catalog
  #########################################################
  lakekeeper:
    container_name: local-lakehouse-lakekeeper
    image: *lakekeeper-image
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://adpuser:adppassword@shared-database:5432/lakekeeper
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://adpuser:adppassword@shared-database:5432/lakekeeper
      - RUST_LOG=info,lakekeeper=info,lakekeeper_bin=info,iceberg_ext=info
    command: ["serve"]
    healthcheck:
      test: ["CMD", "/home/nonroot/lakekeeper", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      lakekeeper-migrate:
        condition: service_completed_successfully
      shared-database:
        condition: service_healthy
      minio-createbucket:
        condition: service_completed_successfully
    networks: *lakehouse-networks
    extra_hosts:
      - "analytics.localhost:host-gateway"

  lakekeeper-migrate:
    container_name: local-lakehouse-lakekeeper-migrate
    image: *lakekeeper-image
    environment:
      LAKEKEEPER__PG_ENCRYPTION_KEY: This-is-NOT-Secure!
      LAKEKEEPER__PG_DATABASE_URL_READ: postgresql://adpuser:adppassword@shared-database:5432/lakekeeper
      LAKEKEEPER__PG_DATABASE_URL_WRITE: postgresql://adpuser:adppassword@shared-database:5432/lakekeeper
      RUST_LOG: info
    restart: "no"
    command: ["migrate"]
    depends_on:
      shared-database-createdatabases:
        condition: service_completed_successfully
    networks: *lakehouse-networks

  lakekeeper-createwarehouse:
    container_name: local-lakehouse-lakekeeper-createwarehouse
    image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
    environment:
      UV_LINK_MODE: copy
      UV_PROJECT_ENVIRONMENT: /opt/uv-venv
      LAKEKEEPER_BOOTSTRAP__LAKEKEEPER_URL: http://lakekeeper:8181
      LAKEKEEPER_BOOTSTRAP__WAREHOUSE_JSON_FILE: /opt/work/bootstrap-warehouse.json
    command: ["uv", "run", "/opt/work/bootstrap-warehouse.py"]
    depends_on:
      lakekeeper:
        condition: service_healthy
      minio-createbucket:
        condition: service_completed_successfully
    volumes:
      - "./lakekeeper/bootstrap-warehouse-no-auth.py:/opt/work/bootstrap-warehouse.py"
      - "./lakekeeper/bootstrap-warehouse.json:/opt/work/bootstrap-warehouse.json"
    networks: *lakehouse-networks

  #########################################################
  # Trino query engine
  #########################################################
  trino:
    container_name: local-lakehouse-trino
    image: *trino-image
    volumes:
      - "./trino/etc:/etc/trino:ro"
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8080/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks: *lakehouse-networks

  #########################################################
  # Superset BI tool
  #########################################################

  superset-redis:
    container_name: local-lakehouse-superset-redis
    env_file: *superset-env
    image: redis:8
    restart: unless-stopped
    volumes:
      - shared_redis_data:/data
    networks: *lakehouse-networks

  superset-app:
    container_name: local-lakehouse-superset-app
    env_file: *superset-env
    build: *superset-build
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: *superset-user
    restart: unless-stopped
    depends_on:
      <<: *superset-depends-on
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    networks: *lakehouse-networks

  superset-init:
    container_name: local-lakehouse-superset-init
    env_file: *superset-env
    build: *superset-build
    command: ["/app/docker/docker-init.sh"]
    depends_on:
      <<: *superset-depends-on
      shared-database:
        condition: service_healthy
    user: *superset-user
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks: *lakehouse-networks

  superset-worker:
    container_name: local-lakehouse-superset-worker
    env_file: *superset-env
    build: *superset-build
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    restart: unless-stopped
    depends_on:
      <<: *superset-depends-on
      superset-app:
        condition: service_healthy
    user: *superset-user
    volumes: *superset-volumes
    networks: *lakehouse-networks
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]

  superset-worker-beat:
    container_name: local-lakehouse-superset-worker-beat
    env_file: *superset-env
    build: *superset-build
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    restart: unless-stopped
    depends_on:
      <<: *superset-depends-on
      superset-app:
        condition: service_healthy
    user: *superset-user
    volumes: *superset-volumes
    networks: *lakehouse-networks
    healthcheck:
      disable: true

networks:
  local-lakehouse-net:
    name: local-lakehouse-net

volumes:
  shared_database_data:
    name: local-lakehouse_shared_database_data
  minio_data:
    name: local-lakehouse_minio_data
  shared_redis_data:
    name: local-lakehouse_shared_redis_data
