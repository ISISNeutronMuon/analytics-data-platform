---
- name: Create container network
  become: true
  community.docker.docker_network:
    name: "{{ superset_container_network }}"

- name: Ensure configuration directory exists
  become: true
  ansible.builtin.file:
    path: "{{ superset_config_path }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure configuration files are synchronized
  become: true
  ansible.posix.synchronize:
    use_ssh_args: true
    src: ./
    dest: "{{ superset_config_path }}/"
    archive: false
    recursive: true
    delete: true

- name: Ensure templated configuration files are synchronized
  become: true
  ansible.builtin.template:
    src: "{{ superset_template.src }}"
    dest: "{{ superset_config_path }}/{{ superset_template.dest }}"
    mode: "{{ superset_template.mode|default('u=rw,g=r,o=r') }}"
  loop:
    - { src: Dockerfile.j2, dest: Dockerfile }
    - { src: docker-compose.yml.j2, dest: docker-compose.yml }
    - { src: docker/dotenv.j2, dest: docker/.env }
    - {
        src: docker/docker-init.sh.j2,
        dest: docker/docker-init.sh,
        mode: "u=rwx,g=rx,o=r",
      }
  loop_control:
    loop_var: superset_template

- name: Ensure certificates directory exists
  become: true
  ansible.builtin.file:
    path: "{{ superset_config_path }}/certs"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure certificates are present
  become: true
  no_log: true
  ansible.builtin.copy:
    dest: "{{ superset_config_path }}/certs/{{ certificate.filename }}"
    content: "{{ certificate.content }}"
    owner: root
    group: root
    mode: "u=r,o=,g="
  loop:
    - { filename: stfc-ca.pem, content: "{{ stfc_ca_cert }}" }
  loop_control:
    loop_var: certificate

- name: Pull Superset sources
  become: true
  ansible.builtin.git:
    repo: https://github.com/martyngigg/superset/
    dest: "{{ superset_build_path }}"
    version: "{{ superset_build_git_ref }}"
  register: sources

- name: Build base Superset docker image
  become: true
  community.docker.docker_image_build:
    name: "{{ superset_base_image }}"
    path: "{{ superset_build_path }}"
    args:
      BASE_PATH: "{{ superset_base_path if (superset_base_path != '/') else '' }}"
      PY_VER: 3.10-slim-bookworm
    target: lean
    rebuild: always
  when: sources.changed or (superset_rebuild_base_image | default(false))

- name: Run Superset services
  become: true
  community.docker.docker_compose_v2:
    project_src: "{{ superset_config_path }}"
    build: always
    recreate: always
    state: present
