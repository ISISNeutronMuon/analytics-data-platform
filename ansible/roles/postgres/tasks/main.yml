---
- name: Ensure postgres data directory exists
  become: true
  ansible.builtin.file:
    path: "{{ postgres_db_data_path }}"
    state: directory
    owner: 26
    group: 999
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure secrets directory exists
  become: true
  ansible.builtin.file:
    path: /secrets
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Ensure postgres secrets are available
  become: true
  ansible.builtin.copy:
    dest: /secrets/postgres-passwd
    content: "{{ postgres_db_passwd }}"
    owner: root
    group: root
    mode: "u=r,g=r,o=r"

- name: Ensure docker initdb directory exists
  become: true
  ansible.builtin.file:
    path: "{{ postgres_docker_initdb_path }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Create docker initdb script
  become: true
  ansible.builtin.template:
    src: init-catalog-dbs.sh.j2
    dest: "{{ postgres_docker_initdb_path }}/init-catalogs-dbs.sh"
    mode: "u=rwx,g=rwx,o=r"

- name: Create container network
  become: true
  community.docker.docker_network:
    name: "{{ postgres_container_network }}"

- name: Ensure Postgresql container is running
  become: true
  community.docker.docker_container:
    name: postgres
    image: "{{ postgres_image }}"
    state: started
    cleanup: true
    detach: true
    restart_policy: unless-stopped
    published_ports:
      - "{{ postgres_db_port }}:5432"
    env: POSTGRES_USER="{{ postgres_db_user }}"
      POSTGRES_PASSWORD_FILE=/secrets/postgres-passwd
    volumes:
      - "{{ postgres_db_data_path }}:/var/lib/postgresql/data"
      - /secrets:/secrets:ro
      - "{{ postgres_docker_initdb_path }}:/docker-entrypoint-initdb.d"
    networks:
      - name: "{{ postgres_container_network }}"
    comparisons:
      networks: strict
